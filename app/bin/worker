#!/usr/bin/env php
<?php
namespace BZContact;

use Dotenv\Dotenv;
use Slim\App;
use Slim\Exception\ContainerValueNotFoundException;

if (PHP_SAPI !== 'cli') {
    echo "[error] this is a console program!\n";
    exit(1);
}

require __DIR__ . '/../../vendor/autoload.php';

// Load Environment
$envFile = dirname(__FILE__) . '/../../.env';
if (is_readable($envFile)) {
    $dotenv = new Dotenv(dirname($envFile));
    $dotenv->load();
}

// Instantiate the app
$settings = require __DIR__ . '/../settings.php';
$app = new App($settings);

// Set up dependencies, defines $container variable
require __DIR__ . '/../dependencies.php';

// Override mailer with Swift Mailer
$container['mailer'] = function ($c) {
    $settings = $c->get('settings')['mailer'];
    $transport = \Swift_SmtpTransport::newInstance($settings['host'], $settings['port'])
        ->setUsername($settings['username'])
        ->setPassword($settings['password']);
    $swiftMailer = \Swift_Mailer::newInstance($transport);
    $mailer = new Mailer\SwiftMailer($swiftMailer, $c);
    return $mailer;
};

// Register actions
require __DIR__ . '/../actions.php';

$amqp = $container->get('amqp');
$channel = $amqp->channel();
$queue = $container->get('settings')['amqp']['queue'];

// name: $queue
// passive: false
// durable: true // the queue will survive server restarts
// exclusive: false // the queue can be accessed in other channels
// auto_delete: false //the queue won't be deleted once the channel is closed.
$channel->queue_declare($queue, false, true, false, false);

$container->get('logger')->info('Ready for messages...');

// This tells RabbitMQ not to give more than one message to a worker at a time
$channel->basic_qos(null, 1, null);

// queue: Queue from where to get the messages
// consumer_tag: Consumer identifier
// no_local: Don't receive messages published by this consumer.
// no_ack: Tells the server if the consumer will acknowledge the messages.
// exclusive: Request exclusive consumer access, meaning only this consumer can access the queue
// nowait:
// callback: A PHP Callback
$channel->basic_consume($queue, '', false, false, false, false, function ($msg) use ($container) {
    $logger = $container->get('logger');

    // Parse message payload
    $payload = json_decode($msg->body, true);

    // ACK and stop if payload is not valid
    if (JSON_ERROR_NONE !== json_last_error()) {
        $logger->error("Invalid JSON payload", ['error' => json_last_error_msg()]);
        $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);
        return;
    }

    // ACK and stop if payload does not contain an action
    if (empty($payload['action'])) {
        $logger->error("No action");
        $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);
        return;
    }

    // Do long stuff here...
    try {
        $logger->info('Processing action', ['action' => $payload['action']]);
        $action = $container->get('action-' . $payload['action']);
        if (!is_callable($action)) {
            $logger->error("Invalid action handler", ['action' => $payload['action']]);
            // No ACK, another worker could have the handler...
        }

        // ACK if action is successful
        if (true === $action($payload)) {
            // If all right, send an ACK, if not the message will be sent to another worker
            $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);
            return;
        }
        // Bounce back the message and re queue it, useful for temporary errors, such as timeout
        $msg->delivery_info['channel']->basic_nack($msg->delivery_info['delivery_tag'], false, true);
    } catch (ContainerValueNotFoundException $e) {
        $logger->error("Action not available", ['action' => $payload['action']]);
        // No ACK, another worker could have the handler...
    } catch (\InvalidArgumentException $e) {
        // Right action wrong arguments, ACK and notify the error
        $logger->error($e->getMessage());
        $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);
    } catch (\Exception $e) {
        $logger->error($e->getMessage());
    }
});

/**
 * @param \PhpAmqpLib\Channel\AMQPChannel $channel
 * @param \PhpAmqpLib\Connection\AbstractConnection $connection
 */
register_shutdown_function(function ($channel, $connection) use ($container) {
    $container->get('logger')->info('Closing connections...');
    $channel->close();
    $connection->close();
    $container->get('logger')->info('Connections closed, exit.');
}, $channel, $amqp);

// loop over incoming messages
while(count($channel->callbacks)) {
    $channel->wait();
}
